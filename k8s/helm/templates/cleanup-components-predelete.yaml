{{- /*
Pre-delete cleanup:
- Deletes all k8s.cloudogu.com/v1 Component CRs in the current namespace
- Waits until zero remain (lets the operator handle finalizers)
- No ClusterRole/ClusterRoleBinding required

Values (optional):
  cleanup:
    timeoutSeconds: 900
    image:
      registry: docker.io
      repository: alpine/kubectl
      tag: 1.34.0
*/ -}}

{{- $timeout := .Values.cleanup.timeoutSeconds | default 900 -}}
{{- $registry := .Values.cleanup.image.registry | default "docker.io" -}}
{{- $repo := .Values.cleanup.image.repository | default "alpine/kubectl" -}}
{{- $tag  := .Values.cleanup.image.tag | default "" -}}
{{- $image := printf "%s/%s:%s" $registry $repo $tag -}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    # Helm pre-delete hook
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: hook-succeeded
    # Argo CD (optional): run on app delete/prune
    argocd.argoproj.io/hook: PreDelete
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: hook-succeeded
    argocd.argoproj.io/hook: PreDelete
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
rules:
  - apiGroups: ["k8s.cloudogu.com"]
    resources: ["components"]
    verbs: ["get","list","watch","delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: hook-succeeded
    argocd.argoproj.io/hook: PreDelete
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}-cleanup
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-cleanup
    namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: hook-succeeded
    argocd.argoproj.io/hook: PreDelete
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 0
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-cleanup
      restartPolicy: Never
      containers:
        - name: cleaner
          image: {{ $image | quote }}
          imagePullPolicy: IfNotPresent
          env:
            - name: TIMEOUT_SECONDS
              value: "{{ $timeout }}"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -euo pipefail
              NS="${POD_NAMESPACE}"

              echo "Deleting all Component CRs in namespace ${NS}…"
              kubectl delete components --all -n "${NS}" --ignore-not-found

              echo "Waiting for Component CRs to be gone in ${NS} (timeout: ${TIMEOUT_SECONDS}s)…"
              end=$((SECONDS + TIMEOUT_SECONDS))
              while true; do
                # If the resource disappears during teardown, treat as 0.
                remaining=$(kubectl get components -n "${NS}" --no-headers 2>/dev/null | wc -l | tr -d ' ' || true)
                remaining=${remaining:-0}
                if [ "${remaining}" -eq 0 ]; then
                  echo "All components in ${NS} deleted."
                  break
                fi
                if [ ${SECONDS} -ge ${end} ]; then
                  echo "Timed out waiting; still present: ${remaining}"
                  exit 1
                fi
                echo "Still waiting… remaining: ${remaining}"
                sleep 5
              done


              echo "Cleanup completed."
