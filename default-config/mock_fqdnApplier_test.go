// Code generated by mockery v2.53.3. DO NOT EDIT.

package main

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockFqdnApplier is an autogenerated mock type for the fqdnApplier type
type mockFqdnApplier struct {
	mock.Mock
}

type mockFqdnApplier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFqdnApplier) EXPECT() *mockFqdnApplier_Expecter {
	return &mockFqdnApplier_Expecter{mock: &_m.Mock}
}

// ApplyInitialFQDN provides a mock function with given fields: ctx, timeout
func (_m *mockFqdnApplier) ApplyInitialFQDN(ctx context.Context, timeout time.Duration) error {
	ret := _m.Called(ctx, timeout)

	if len(ret) == 0 {
		panic("no return value specified for ApplyInitialFQDN")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockFqdnApplier_ApplyInitialFQDN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyInitialFQDN'
type mockFqdnApplier_ApplyInitialFQDN_Call struct {
	*mock.Call
}

// ApplyInitialFQDN is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
func (_e *mockFqdnApplier_Expecter) ApplyInitialFQDN(ctx interface{}, timeout interface{}) *mockFqdnApplier_ApplyInitialFQDN_Call {
	return &mockFqdnApplier_ApplyInitialFQDN_Call{Call: _e.mock.On("ApplyInitialFQDN", ctx, timeout)}
}

func (_c *mockFqdnApplier_ApplyInitialFQDN_Call) Run(run func(ctx context.Context, timeout time.Duration)) *mockFqdnApplier_ApplyInitialFQDN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *mockFqdnApplier_ApplyInitialFQDN_Call) Return(_a0 error) *mockFqdnApplier_ApplyInitialFQDN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFqdnApplier_ApplyInitialFQDN_Call) RunAndReturn(run func(context.Context, time.Duration) error) *mockFqdnApplier_ApplyInitialFQDN_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFqdnApplier creates a new instance of mockFqdnApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFqdnApplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFqdnApplier {
	mock := &mockFqdnApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
