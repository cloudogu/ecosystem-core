// Code generated by mockery v2.53.3. DO NOT EDIT.

package config

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockGlobalConfigWriter is an autogenerated mock type for the globalConfigWriter type
type mockGlobalConfigWriter struct {
	mock.Mock
}

type mockGlobalConfigWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGlobalConfigWriter) EXPECT() *mockGlobalConfigWriter_Expecter {
	return &mockGlobalConfigWriter_Expecter{mock: &_m.Mock}
}

// applyDefaultGlobalConfig provides a mock function with given fields: ctx, defaultGlobalConfig
func (_m *mockGlobalConfigWriter) applyDefaultGlobalConfig(ctx context.Context, defaultGlobalConfig map[string]string) error {
	ret := _m.Called(ctx, defaultGlobalConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyDefaultGlobalConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) error); ok {
		r0 = rf(ctx, defaultGlobalConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockGlobalConfigWriter_applyDefaultGlobalConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyDefaultGlobalConfig'
type mockGlobalConfigWriter_applyDefaultGlobalConfig_Call struct {
	*mock.Call
}

// applyDefaultGlobalConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - defaultGlobalConfig map[string]string
func (_e *mockGlobalConfigWriter_Expecter) applyDefaultGlobalConfig(ctx interface{}, defaultGlobalConfig interface{}) *mockGlobalConfigWriter_applyDefaultGlobalConfig_Call {
	return &mockGlobalConfigWriter_applyDefaultGlobalConfig_Call{Call: _e.mock.On("applyDefaultGlobalConfig", ctx, defaultGlobalConfig)}
}

func (_c *mockGlobalConfigWriter_applyDefaultGlobalConfig_Call) Run(run func(ctx context.Context, defaultGlobalConfig map[string]string)) *mockGlobalConfigWriter_applyDefaultGlobalConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string))
	})
	return _c
}

func (_c *mockGlobalConfigWriter_applyDefaultGlobalConfig_Call) Return(_a0 error) *mockGlobalConfigWriter_applyDefaultGlobalConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGlobalConfigWriter_applyDefaultGlobalConfig_Call) RunAndReturn(run func(context.Context, map[string]string) error) *mockGlobalConfigWriter_applyDefaultGlobalConfig_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGlobalConfigWriter creates a new instance of mockGlobalConfigWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGlobalConfigWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGlobalConfigWriter {
	mock := &mockGlobalConfigWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
