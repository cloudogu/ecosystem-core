// Code generated by mockery v2.53.3. DO NOT EDIT.

package config

import (
	context "context"

	k8s_registry_libconfig "github.com/cloudogu/k8s-registry-lib/config"
	mock "github.com/stretchr/testify/mock"
)

// mockGlobalConfigRepo is an autogenerated mock type for the globalConfigRepo type
type mockGlobalConfigRepo struct {
	mock.Mock
}

type mockGlobalConfigRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGlobalConfigRepo) EXPECT() *mockGlobalConfigRepo_Expecter {
	return &mockGlobalConfigRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, globalConfig
func (_m *mockGlobalConfigRepo) Create(ctx context.Context, globalConfig k8s_registry_libconfig.GlobalConfig) (k8s_registry_libconfig.GlobalConfig, error) {
	ret := _m.Called(ctx, globalConfig)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 k8s_registry_libconfig.GlobalConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, k8s_registry_libconfig.GlobalConfig) (k8s_registry_libconfig.GlobalConfig, error)); ok {
		return rf(ctx, globalConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, k8s_registry_libconfig.GlobalConfig) k8s_registry_libconfig.GlobalConfig); ok {
		r0 = rf(ctx, globalConfig)
	} else {
		r0 = ret.Get(0).(k8s_registry_libconfig.GlobalConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, k8s_registry_libconfig.GlobalConfig) error); ok {
		r1 = rf(ctx, globalConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGlobalConfigRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockGlobalConfigRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - globalConfig k8s_registry_libconfig.GlobalConfig
func (_e *mockGlobalConfigRepo_Expecter) Create(ctx interface{}, globalConfig interface{}) *mockGlobalConfigRepo_Create_Call {
	return &mockGlobalConfigRepo_Create_Call{Call: _e.mock.On("Create", ctx, globalConfig)}
}

func (_c *mockGlobalConfigRepo_Create_Call) Run(run func(ctx context.Context, globalConfig k8s_registry_libconfig.GlobalConfig)) *mockGlobalConfigRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(k8s_registry_libconfig.GlobalConfig))
	})
	return _c
}

func (_c *mockGlobalConfigRepo_Create_Call) Return(_a0 k8s_registry_libconfig.GlobalConfig, _a1 error) *mockGlobalConfigRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGlobalConfigRepo_Create_Call) RunAndReturn(run func(context.Context, k8s_registry_libconfig.GlobalConfig) (k8s_registry_libconfig.GlobalConfig, error)) *mockGlobalConfigRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *mockGlobalConfigRepo) Get(ctx context.Context) (k8s_registry_libconfig.GlobalConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 k8s_registry_libconfig.GlobalConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (k8s_registry_libconfig.GlobalConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) k8s_registry_libconfig.GlobalConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(k8s_registry_libconfig.GlobalConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGlobalConfigRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockGlobalConfigRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockGlobalConfigRepo_Expecter) Get(ctx interface{}) *mockGlobalConfigRepo_Get_Call {
	return &mockGlobalConfigRepo_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *mockGlobalConfigRepo_Get_Call) Run(run func(ctx context.Context)) *mockGlobalConfigRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockGlobalConfigRepo_Get_Call) Return(_a0 k8s_registry_libconfig.GlobalConfig, _a1 error) *mockGlobalConfigRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGlobalConfigRepo_Get_Call) RunAndReturn(run func(context.Context) (k8s_registry_libconfig.GlobalConfig, error)) *mockGlobalConfigRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOrMerge provides a mock function with given fields: ctx, globalConfig
func (_m *mockGlobalConfigRepo) SaveOrMerge(ctx context.Context, globalConfig k8s_registry_libconfig.GlobalConfig) (k8s_registry_libconfig.GlobalConfig, error) {
	ret := _m.Called(ctx, globalConfig)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrMerge")
	}

	var r0 k8s_registry_libconfig.GlobalConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, k8s_registry_libconfig.GlobalConfig) (k8s_registry_libconfig.GlobalConfig, error)); ok {
		return rf(ctx, globalConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, k8s_registry_libconfig.GlobalConfig) k8s_registry_libconfig.GlobalConfig); ok {
		r0 = rf(ctx, globalConfig)
	} else {
		r0 = ret.Get(0).(k8s_registry_libconfig.GlobalConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, k8s_registry_libconfig.GlobalConfig) error); ok {
		r1 = rf(ctx, globalConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGlobalConfigRepo_SaveOrMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrMerge'
type mockGlobalConfigRepo_SaveOrMerge_Call struct {
	*mock.Call
}

// SaveOrMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - globalConfig k8s_registry_libconfig.GlobalConfig
func (_e *mockGlobalConfigRepo_Expecter) SaveOrMerge(ctx interface{}, globalConfig interface{}) *mockGlobalConfigRepo_SaveOrMerge_Call {
	return &mockGlobalConfigRepo_SaveOrMerge_Call{Call: _e.mock.On("SaveOrMerge", ctx, globalConfig)}
}

func (_c *mockGlobalConfigRepo_SaveOrMerge_Call) Run(run func(ctx context.Context, globalConfig k8s_registry_libconfig.GlobalConfig)) *mockGlobalConfigRepo_SaveOrMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(k8s_registry_libconfig.GlobalConfig))
	})
	return _c
}

func (_c *mockGlobalConfigRepo_SaveOrMerge_Call) Return(_a0 k8s_registry_libconfig.GlobalConfig, _a1 error) *mockGlobalConfigRepo_SaveOrMerge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGlobalConfigRepo_SaveOrMerge_Call) RunAndReturn(run func(context.Context, k8s_registry_libconfig.GlobalConfig) (k8s_registry_libconfig.GlobalConfig, error)) *mockGlobalConfigRepo_SaveOrMerge_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGlobalConfigRepo creates a new instance of mockGlobalConfigRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGlobalConfigRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGlobalConfigRepo {
	mock := &mockGlobalConfigRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
